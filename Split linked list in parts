// Split linked list in parts


 // TC- O(n)  SC-O(1)  where n is the size of list
 
   // Code---
   
      int length(ListNode* head){
        ListNode* curr=head;
        int len=0;
        while(curr!=NULL){
            len++;
            curr=curr->next;
        }
        return len;
    }
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        if(k==1) {
             vector<ListNode*>v(k); 
            v[0]=head;
            return v;
        }
        int cnt=length(head);
        if(k>=cnt){
            vector<ListNode*>v(k);
            ListNode*curr=head;
            ListNode*dummy=new ListNode(-1);
            for(int i=0;i<k;i++){
                if(curr!=NULL){
                ListNode*s=new ListNode(-1);
                    dummy=s;
                s->next=curr;
                s=s->next;
                curr=curr->next;
                s->next=NULL;
                v[i]=dummy->next;
                }else{
                    v[i]=NULL;
                }
            }
            return v;
        }else{
            int m1=length(head)/k;
            int m2=length(head)%k;
            vector<ListNode*>v(k);
            ListNode*dummy=new ListNode(-1);
            ListNode*curr=head;
            for(int i=0;i<k;i++){
                ListNode*s=new ListNode(-1);
                dummy=s;
                if(m2>0){
                    int a=m1+1;
                    while(a-->0){
                        s->next=curr;
                        s=s->next;
                        curr=curr->next;
                    }
                    s->next=NULL;
                    v[i]=dummy->next;
                    m2--;
                }else{
                    int a=m1;
                    while(a-->0){
                        s->next=curr;
                        s=s->next;
                        curr=curr->next;
                    }
                    s->next=NULL;
                    v[i]=dummy->next;
                }
            }
            return v;
        }
    }
