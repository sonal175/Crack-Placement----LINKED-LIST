// Merge K Sorted Linked lists

// Method 1- Using divide and conquer
  // TC-O(Nlogk) where N=n*k ,where n is the size of each linked list and k is the total number of linked lists and N is total number of nodes.
  // SC-O(N)=O(n*k)  as this method uses recursion
  
   // Code---
   
      ListNode* merge(vector<ListNode*>&lists,int left, int right){
        if(left==right){
            return lists[left];
        }
        int k=right-left+1;
        ListNode* head, * h1,*h2, * ptr;
        head=h1=h2=NULL;
        h1=merge(lists, left, left+k/2-1);
        h2=merge(lists, left+k/2,right);
        
         
        if(!h1 && !h2){
            return head;
        }else if(!h1){
            return h2;
        }else if(!h2){
            return h1;
        }
        
          
        if(!h1 || (h1->val>h2->val)){
            head=h2;
            h2=h2->next;
        }else{
            head=h1;
            h1=h1->next;
        }
        
          
        ptr=head;
        while(h1 || h2){
            if(!h1){
                ptr->next=h2; h2=h2->next;  ptr=ptr->next;
            }else if(!h2){
                ptr->next=h1; h1=h1->next;  ptr=ptr->next;
            }else if(h1->val<h2->val){
                ptr->next= h1;  h1=h1->next; ptr=ptr->next;
            }else{
                ptr->next=h2;   h2=h2->next;  ptr=ptr->next;
            }
        }
        return head;
        
        
        
    
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int k=lists.size();
        if(k==0){
            return NULL;
        }else if(k==1){
            return lists[0];
        }
        ListNode*head,*h1,*h2,*ptr;
        head=h1=h2=NULL;
        h1=merge(lists,0,k/2);
        if(k/2+1<=k-1){
            h2=merge(lists,k/2+1,k-1);
        }
        if(!h1 && !h2){
            return head;
        }else if(!h1){
            return h2;
        }else if(!h2){
            return h1;
        }
        
        if(!h1 || (h1->val>h2->val)){
            head=h2;
            h2=h2->next;
        }else{
            head=h1;
            h1=h1->next;
        }
        
        ptr=head;
        while(h1 || h2){
            if(!h1){
                ptr->next=h2; h2=h2->next;  ptr=ptr->next;
            }else if(!h2){
                ptr->next=h1; h1=h1->next;  ptr=ptr->next;
            }else if(h1->val<h2->val){
                ptr->next= h1;  h1=h1->next; ptr=ptr->next;
            }else{
                ptr->next=h2;   h2=h2->next;  ptr=ptr->next;
            }
        }
        return head;
    }
    
    
 // Using min heap approach
 
  // TC- O(Nlogk) where N=n*k 
  //SC- O(k)
  
   // Code--
   
     class compare{
        public:
        bool operator()(ListNode*a, ListNode*b){
            return a->val>b->val;
        }
    };
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode*,vector<ListNode*>,compare>pq;
        for(int i=0;i<lists.size();i++){
            if(lists[i]!=NULL){
                pq.push(lists[i]);
            }
        }
        if(pq.empty()) return NULL;
        ListNode* dummy=new ListNode(0);
        ListNode* last=dummy;
        
        while(!pq.empty()){
            ListNode* curr=pq.top();
            pq.pop();
            last->next=curr;
            last=last->next;
            if(curr->next!=NULL){
                pq.push(curr->next);
            }
            
        }
        return dummy->next;
    }
